/* eslint-disable no-unused-vars */
// ==================================
// === dashboard.js (REVISED with Event Delegation for Settings Tabs) ===
// ==================================
document.addEventListener('DOMContentLoaded', function() {
    console.log("üöÄ DOM Ready. Dashboard JS Initializing...");

    // --- DOM Elements ---
    // Helper functions to get elements robustly
    const getElement = (id, required = true) => {
        const el = document.getElementById(id);
        if (!el && required) {
            console.error(`Critical Error: Element with ID '${id}' not found!`);
        } else if (!el && !required) {
             // console.warn(`Optional element with ID '${id}' not found.`); // Make optional warnings less verbose if needed
        }
        return el;
    };

    const querySelector = (selector, required = true, scope = document) => {
        const el = scope.querySelector(selector);
         if (!el && required) {
            console.error(`Critical Error: Element with selector '${selector}' not found in scope`, scope);
        } else if (!el && !required) {
             // console.warn(`Optional element with selector '${selector}' not found.`);
        }
        return el;
    }

    const querySelectorAll = (selector, scope = document) => {
        const els = scope.querySelectorAll(selector);
        // No warning needed here generally, as empty lists are common
        return els;
    }

    // Core Layout Elements
    const sidebar = getElement('sidebar', false);
    const mainContent = querySelector('.main-content', true); // Assume main content must exist
    const topNav = querySelector('.top-nav', false);
    const contentArea = querySelector('.content-area', true); // Assume content area must exist

    // Navigation Elements
    const sidebarMenu = querySelector('.sidebar-menu', true); // Sidebar menu is crucial
    const menuButtons = querySelectorAll('.sidebar-menu button[data-section]');
    const userDropdownToggle = querySelector('.user-profile-details', false); // Element to click to open dropdown
    const userDropdown = getElement('userDropdown', false);
    const dropdownButtons = querySelectorAll('.user-dropdown button[data-section]');
    const backButton = getElement('backButton', false);
    const logoutLink = getElement('logoutLink', false);

    // Content Section Elements (Static)
    const staticContentSections = querySelectorAll('.content-area > .content-section');
    const dashboardContent = getElement('dashboardContent', true); // Assume dashboard exists
    const profileContent = getElement('profileContent', false); // Profile might be optional initially
    const settingsContent = getElement('settingsContent', false); // Settings might be optional initially

    // Dynamic Content Elements
    const featureSectionsContainer = getElement('featureSectionsContainer', true); // Crucial for dynamic loading
    const featureSections = getElement('featureSections', true);                 // Crucial
    const featurePlaceholder = getElement('featurePlaceholder', true);           // Crucial
    const featureTitle = getElement('featureTitle', false, featurePlaceholder); // Search within placeholder
    const featureDescription = getElement('featureDescription', false, featurePlaceholder);
    const featureLoadingIndicator = featurePlaceholder ? querySelector('.loading-indicator', false, featurePlaceholder) : null;
    const featureErrorMessage = featurePlaceholder ? querySelector('.error-message', false, featurePlaceholder) : null;

    // Settings Specific Elements (Container for event delegation)
    const settingsTabsContainer = querySelector('.settings-tabs', false); // Find container for delegation

    // --- State Variables ---
    let currentUser = null;
    let teamMembers = [];
    let activities = [];
    let notifications = [];
    let currentSectionName = null;
    let currentSettingsTab = null;
    let currentSectionScript = null;
    let isInitialLoad = true;

    // --- Section Initialization Map ---
    const sectionsWithJS = {
        'employee-scheduling': 'initializeEmployeeSchedule',
        // Add other dynamic sections here
    };

    // --- MOCK/Placeholder Functions ---
    // (Keep the same mock functions as before)
    function loadData() { console.log("üîÑ Mock loadData called - Simulating fetching user and team..."); return new Promise(resolve => { setTimeout(() => { currentUser = { id: 1, role: 'admin', name: 'Mohamed Elmenisy', email: 'm.elsayed@thechefz.co', preferences: { theme: 'blue', layoutDensity: 'normal' } }; teamMembers = [ { id: 101, name: 'Alice Smith', email: 'alice@example.com', role: 'member', position: 'Developer' }, { id: 102, name: 'Bob Johnson', email: 'bob@example.com', role: 'supervisor', position: 'Team Lead' }, { id: currentUser.id, name: currentUser.name, email: currentUser.email, role: currentUser.role, position: 'Administrator'} ]; console.log("   üìä Mock Data Loaded:", { currentUser, teamMembers }); resolve(); }, 50); }); }
    function updateUserUI() { console.log("üîÑ Mock updateUserUI called"); }
    function loadTeamMembers() { console.log("üîÑ Mock loadTeamMembers called (e.g., for settings page)"); }
    function loadActivities() { console.log("üîÑ Mock loadActivities called (for dashboard)"); }
    function loadNotifications() { console.log("üîÑ Mock loadNotifications called"); }
    function updateStats() { console.log("üîÑ Mock updateStats called (for dashboard)"); }
    function applyUserPreferences() { console.log("üé® Applying User Preferences..."); if (currentUser && currentUser.preferences) { document.body.classList.remove('light-theme', 'dark-theme', 'blue-theme'); document.body.classList.add(`${currentUser.preferences.theme || 'blue'}-theme`); console.log(`   Applied theme: ${currentUser.preferences.theme || 'blue'}-theme`); const density = currentUser.preferences.layoutDensity || 'normal'; let paddingVar; switch (density) { case 'compact': paddingVar = 'var(--compact-padding)'; break; case 'spacious': paddingVar = 'var(--spacious-padding)'; break; default: paddingVar = 'var(--normal-padding)'; } document.documentElement.style.setProperty('--current-padding', paddingVar); document.body.classList.remove('compact', 'normal', 'spacious'); document.body.classList.add(density); console.log(`   Applied density: ${density} (padding: ${paddingVar})`); } else { console.warn("   User preferences not available to apply."); document.documentElement.style.setProperty('--current-padding', 'var(--normal-padding)'); document.body.classList.add('normal'); } }
    function applyRBAC() { console.log("üîí Applying RBAC..."); }
    function loadSettingsFormData() { console.log("üîÑ Mock loadSettingsFormData called"); }
    function handleLogout() { console.log("üö™ Logout clicked"); alert("Logout functionality placeholder"); window.location.hash = ''; }
    function startActivityTimeUpdater() { console.log("‚è±Ô∏è Mock startActivityTimeUpdater called"); }

    // --- Helper Functions ---
    function hideAllContentSections() {
        console.log("    Hiding all static content sections...");
        staticContentSections.forEach(section => section.classList.remove('active'));
        if (featureSectionsContainer) {
             console.log("   Hiding dynamic feature container...");
             featureSectionsContainer.style.display = 'none';
        }
         if (featureSections) {
             featureSections.classList.remove('active');
         }
    }

    function showStaticSection(element) {
        if (element) {
            console.log(`   ‚úÖ Showing static section: #${element.id}`);
            element.classList.add('active');
        } else {
            console.error(`   ‚ùå Cannot show static section: Element is null.`);
        }
    }

    function showDynamicContainer() {
        if (featureSectionsContainer) {
            console.log(`   ‚úÖ Showing dynamic container: #${featureSectionsContainer.id}`);
            featureSectionsContainer.style.display = 'block';
        } else {
             console.error(`   ‚ùå Cannot show dynamic container: Element not found.`);
        }
    }

    function updateActiveNav(sectionName) {
        console.log(`   Navigating UI to: ${sectionName}`);
        menuButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.section === sectionName);
        });
        dropdownButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.section === sectionName);
        });
        if (backButton) {
            backButton.style.display = sectionName !== 'dashboard' ? 'inline-flex' : 'none';
        }
    }

    // --- Core Navigation Logic ---
    function navigateToSection(sectionName, settingsTab = null) {
        console.log(`‚ñ∂Ô∏è navigateToSection called: section=${sectionName}, tab=${settingsTab}`);

        currentSectionName = sectionName;
        currentSettingsTab = (sectionName === 'settings') ? (settingsTab || 'preferences') : null;
        console.log(`   New State: currentSectionName='${currentSectionName}', currentSettingsTab='${currentSettingsTab}'`);

        hideAllContentSections();

        if (sectionName === 'dashboard') {
            showStaticSection(dashboardContent);
            // updateStats(); loadActivities();
        } else if (sectionName === 'profile') {
            showStaticSection(profileContent);
            // updateUserUI();
        } else if (sectionName === 'settings') {
            showStaticSection(settingsContent);
            if (settingsContent) {
                 activateSettingsTab(currentSettingsTab);
                 applyRBAC();
            }
        } else if (sectionsWithJS.hasOwnProperty(sectionName)) {
            showDynamicContainer();
            loadSection(sectionName);
        } else {
            console.warn(`   Unknown section '${sectionName}'. Displaying dashboard as fallback.`);
            showStaticSection(dashboardContent);
            sectionName = 'dashboard';
            currentSectionName = 'dashboard';
            updateActiveNav(sectionName); // Update nav to show dashboard active
        }

        updateActiveNav(sectionName); // Ensure nav active state is correct

        if (!isInitialLoad) {
            let hash = `#${sectionName}`;
             if (sectionName === 'settings' && currentSettingsTab) {
                 hash += `-${currentSettingsTab}`;
             }
             console.log(`   Updating URL Hash. Target: ${hash}, Current: ${window.location.hash}`);
             if (window.location.hash !== hash) {
                 try {
                     if (sectionName === 'settings' && window.location.hash.startsWith('#settings-')) {
                         history.replaceState({ section: sectionName, tab: currentSettingsTab }, '', hash);
                     } else {
                         history.pushState({ section: sectionName, tab: currentSettingsTab }, '', hash);
                     }
                 } catch (error) {
                      console.error("   Error updating history state:", error);
                 }
             }
        }

        window.scrollTo(0, 0);
        isInitialLoad = false;
        console.log(`‚óÄÔ∏è navigateToSection finished for: ${sectionName}`);
    }

    // --- Dynamic Section Loading ---
    function loadSection(sectionName) {
        console.log(`üîÑ --- loadSection('${sectionName}') ---`);
        const htmlPath = `sections/${sectionName}.html`;
        const jsPath = `sections/${sectionName}.js`;
        const initFunctionName = sectionsWithJS[sectionName];

        if (!featureSectionsContainer || !featureSections || !featurePlaceholder) {
             console.error("   ‚ùå Cannot load section: Core dynamic elements missing.");
             return;
        }

        console.log("   ‚è≥ Displaying loading state...");
        featureSections.innerHTML = '';
        featureSections.appendChild(featurePlaceholder);
        if(featureTitle) featureTitle.textContent = `Loading ${sectionName.replace(/-/g, ' ')}...`;
        if(featureDescription) featureDescription.textContent = 'Please wait...';
        if(featureLoadingIndicator) featureLoadingIndicator.style.display = 'flex';
        if(featureErrorMessage) featureErrorMessage.style.display = 'none';
        featurePlaceholder.style.display = 'flex';
        featureSections.classList.remove('active');

        if (currentSectionScript && currentSectionScript.parentNode) {
            console.log("   üßπ Removing previous section script:", currentSectionScript.src);
            currentSectionScript.remove();
            currentSectionScript = null;
        }

        console.log(`   1Ô∏è‚É£ Fetching HTML: ${htmlPath}`);
        fetch(htmlPath)
            .then(response => {
                console.log(`      Fetch status for ${htmlPath}: ${response.status}`);
                if (!response.ok) { throw new Error(`HTML Load Error: ${response.status} ${response.statusText} for ${htmlPath}`); }
                return response.text();
            })
            .then(html => {
                console.log(`      ‚úÖ HTML for '${sectionName}' fetched successfully.`);
                featureSections.innerHTML = html;
                featureSections.classList.add('active');
                console.log(`      HTML injected into #featureSections.`);

                if (initFunctionName) {
                    console.log(`   2Ô∏è‚É£ Loading JS: ${jsPath} (Expecting function: ${initFunctionName})`);
                    const script = document.createElement('script');
                    script.src = jsPath;

                    script.onload = () => {
                        console.log(`      ‚úÖ Script loaded: ${jsPath}`);
                        console.log(`   3Ô∏è‚É£ Executing init function: window['${initFunctionName}']`);
                        if (typeof window[initFunctionName] === 'function') {
                            try {
                                console.log("      Passing data:", { currentUser, teamMembers });
                                window[initFunctionName](currentUser, teamMembers);
                                console.log(`      üöÄ SUCCESS: ${initFunctionName} executed!`);
                            } catch (error) {
                                console.error(`      ‚ùå ERROR executing ${initFunctionName}:`, error);
                                featureSections.innerHTML = '';
                                featureSections.appendChild(featurePlaceholder);
                                if(featureTitle) featureTitle.textContent = `Error Initializing ${sectionName}`;
                                if(featureDescription) featureDescription.textContent = `Failed run script: ${error.message}. Check console.`;
                                if(featureLoadingIndicator) featureLoadingIndicator.style.display = 'none';
                                if(featureErrorMessage) { featureErrorMessage.textContent = `Error: ${error.message}`; featureErrorMessage.style.display = 'block'; }
                                featurePlaceholder.style.display = 'flex';
                            }
                        } else {
                            console.error(`      ‚ùå ERROR: Function '${initFunctionName}' NOT FOUND in window scope after loading ${jsPath}.`);
                            featureSections.innerHTML = '';
                            featureSections.appendChild(featurePlaceholder);
                            if(featureTitle) featureTitle.textContent = `Initialization Error`;
                            if(featureDescription) featureDescription.textContent = `Script loaded, but function '${initFunctionName}' is missing. Cannot activate section functionality.`;
                            if(featureLoadingIndicator) featureLoadingIndicator.style.display = 'none';
                            if(featureErrorMessage) { featureErrorMessage.textContent = `Function ${initFunctionName} not found.`; featureErrorMessage.style.display = 'block'; }
                            featurePlaceholder.style.display = 'flex';
                        }
                    };

                    script.onerror = (event) => {
                        console.error(`      ‚ùå ERROR loading script: ${jsPath}`, event);
                        featureSections.innerHTML = '';
                        featureSections.appendChild(featurePlaceholder);
                        if(featureTitle) featureTitle.textContent = `Script Load Error`;
                        if(featureDescription) featureDescription.textContent = `Failed to load the required script: ${jsPath}. The section cannot be fully activated. Check network tab or console.`;
                        if(featureLoadingIndicator) featureLoadingIndicator.style.display = 'none';
                         if(featureErrorMessage) { featureErrorMessage.textContent = `Failed to load ${jsPath}`; featureErrorMessage.style.display = 'block'; }
                        featurePlaceholder.style.display = 'flex';
                        if (script.parentNode) script.remove();
                        currentSectionScript = null;
                    };

                    document.body.appendChild(script);
                    currentSectionScript = script;
                    console.log(`      Script element for ${jsPath} appended to body.`);
                } else {
                    console.log(`   Skipping JS load for '${sectionName}' as no init function is defined.`);
                     // Ensure placeholder is hidden if HTML loaded successfully without JS
                     if(featurePlaceholder && featurePlaceholder.parentNode === featureSections) {
                         featurePlaceholder.style.display = 'none';
                     }
                     featureSections.classList.add('active'); // Still show the HTML content
                }
            })
            .catch(error => {
                console.error(`--- ‚ùå ERROR loading section '${sectionName}' (Fetch/Inject/JS Setup):`, error);
                featureSections.innerHTML = '';
                featureSections.appendChild(featurePlaceholder);
                if(featureTitle) featureTitle.textContent = `Error Loading ${sectionName}`;
                if(featureDescription) featureDescription.textContent = `Could not load section content.`;
                if(featureLoadingIndicator) featureLoadingIndicator.style.display = 'none';
                if(featureErrorMessage) { featureErrorMessage.textContent = `Error: ${error.message}`; featureErrorMessage.style.display = 'block'; }
                featurePlaceholder.style.display = 'flex';
                featureSections.classList.add('active');
            });
    }

    // --- Settings Tab Activation ---
    function activateSettingsTab(tabId) {
        console.log(`‚öôÔ∏è Activating settings tab: ${tabId}`);
        if (!tabId) { tabId = 'preferences'; } // Default tab
        currentSettingsTab = tabId;

        // Need to re-query these inside as they might be inside settingsContent which might just have become visible
        const currentSettingsTabs = querySelectorAll('.settings-tab', settingsContent); // Search within settingsContent
        const currentSettingsPanels = querySelectorAll('.settings-panel', settingsContent); // Search within settingsContent

        currentSettingsTabs.forEach(t => {
            t.classList.toggle('active', t.dataset.tab === tabId);
        });
        currentSettingsPanels.forEach(p => {
            p.classList.toggle('active', p.id === `${tabId}Panel`);
        });

        const hash = `#settings-${tabId}`;
        if (window.location.hash !== hash && !isInitialLoad) {
            history.replaceState({ section: 'settings', tab: tabId }, '', hash);
        }

        console.log(`   Loading data/UI for settings tab: ${tabId}`);
        if (tabId === 'team') loadTeamMembers();
        else if (tabId === 'account') updateUserUI();
        else if (['preferences', 'security', 'notifications'].includes(tabId)) loadSettingsFormData();
        else if (tabId === 'danger' || tabId === 'collaboration') applyRBAC();
    }

    // --- Initial Page Load Navigation ---
    function handleInitialNavigation() {
        console.log("üß≠ --- handleInitialNavigation ---");
        isInitialLoad = true;
        const hash = window.location.hash.substring(1);
        console.log(`   Initial hash found: "${hash}"`);
        let initialSection = 'dashboard';
        let initialTab = null;

        if (hash) {
            if (hash.startsWith('settings-')) {
                 const parts = hash.split('-');
                 // Basic check if the tab might exist, activateSettingsTab handles non-existent panel gracefully
                 if (parts.length > 1) {
                     initialSection = 'settings';
                     initialTab = parts[1];
                     console.log(`   Parsed hash as settings section, tab: ${initialTab}`);
                 } else {
                     initialSection = 'settings'; initialTab = 'preferences'; // Fallback tab
                     history.replaceState(null, '', '#settings-preferences');
                 }
            } else {
                 const isValidStatic = [dashboardContent, profileContent, settingsContent].some(el => el && el.id === `${hash}Content`);
                 const isValidDynamic = sectionsWithJS.hasOwnProperty(hash);
                if (isValidStatic || isValidDynamic) {
                    initialSection = hash;
                    console.log(`   Parsed hash as standard/dynamic section: ${initialSection}`);
                } else {
                    console.warn(`   Invalid section in hash: '#${hash}'. Loading default.`);
                    history.replaceState(null, '', window.location.pathname + window.location.search);
                }
            }
        } else {
             console.log("   No hash found. Defaulting to 'dashboard'.");
        }

        console.log(`   üèÅ Final initial navigation target: Section=${initialSection}, Tab=${initialTab}`);
        navigateToSection(initialSection, initialTab);
    }

    // --- Event Listener Setup ---
    function setupEventListeners() {
        console.log("üéß --- setupEventListeners ---");

        // Sidebar Navigation
        if (sidebarMenu) {
            sidebarMenu.addEventListener('click', function(event) {
                const button = event.target.closest('button[data-section]');
                if (button) { event.preventDefault(); navigateToSection(button.dataset.section); }
            });
            console.log("   Sidebar listeners attached.");
        } else { console.error("   Sidebar menu not found for listeners."); }

        // User Dropdown Toggle & Navigation
        if (userDropdownToggle && userDropdown) {
            userDropdownToggle.addEventListener('click', (e) => { e.stopPropagation(); userDropdown.classList.toggle('active'); });
            userDropdown.addEventListener('click', function(event) {
                 const button = event.target.closest('button[data-section]');
                 if (button) { event.preventDefault(); userDropdown.classList.remove('active'); navigateToSection(button.dataset.section); }
                 else if (event.target.closest('#logoutLink')) { event.preventDefault(); userDropdown.classList.remove('active'); handleLogout(); }
            });
            document.addEventListener('click', (event) => { if (userDropdown.classList.contains('active') && !userDropdownToggle.contains(event.target) && !userDropdown.contains(event.target)) { userDropdown.classList.remove('active'); } });
            console.log("   User dropdown listeners attached.");
        } else { console.warn("   User profile toggle/dropdown elements missing for listeners."); }

        // Back Button
        if (backButton) { backButton.addEventListener('click', () => navigateToSection('dashboard')); console.log("   Back button listener attached."); }

        // Popstate (Browser Back/Forward)
        window.addEventListener('popstate', (event) => {
            console.log("üåÄ --- popstate event triggered ---", event.state);
            if (event.state && event.state.section) {
                isInitialLoad = true; navigateToSection(event.state.section, event.state.tab);
            } else { isInitialLoad = true; handleInitialNavigation(); }
        });
        console.log("   Popstate listener attached.");

        // --- ‚òÖ‚òÖ‚òÖ Settings Tabs (Using Event Delegation) ‚òÖ‚òÖ‚òÖ ---
        if (settingsTabsContainer) {
            settingsTabsContainer.addEventListener('click', (event) => {
                const tab = event.target.closest('.settings-tab');
                if (tab && !tab.classList.contains('active') && !tab.classList.contains('disabled')) {
                    const tabId = tab.dataset.tab;
                    console.log(`Settings tab clicked (delegated): ${tabId}`);
                    activateSettingsTab(tabId);
                }
            });
            console.log("   Settings tab listener attached (delegated to .settings-tabs container).");
        } else {
             console.warn("   Settings tabs container (.settings-tabs) not found for delegated listener.");
        }

        // Logout Link (if not in dropdown)
        if (logoutLink && !userDropdown) { logoutLink.addEventListener('click', (e) => { e.preventDefault(); handleLogout(); }); console.log("   Standalone logout listener attached."); }

        console.log("üéß --- setupEventListeners Finished ---");
    } // --- End setupEventListeners ---

    // --- App Initialization ---
    async function initializeApp() {
        console.log("üöÄ --- Initializing App ---");
        try {
            await loadData(); // Load critical data first
            applyUserPreferences(); // Apply visual prefs
            applyRBAC(); // Apply role restrictions
            setupEventListeners(); // Setup interactions
            handleInitialNavigation(); // Display initial view
            startActivityTimeUpdater(); // Start background tasks
            console.log("‚úÖ --- Dashboard Initialized Successfully ---");
        } catch (error) {
             console.error("‚ùå CRITICAL ERROR during app initialization:", error);
             if(contentArea) { contentArea.innerHTML = `<div style='padding: 2rem; text-align: center; color: var(--danger);'><h2>Application Error</h2><p>Could not initialize the dashboard. Please try refreshing the page.</p><p><small>Error: ${error.message}</small></p></div>`; }
        }
    }

    // --- Start the Application ---
    initializeApp();

}); // End DOMContentLoaded
