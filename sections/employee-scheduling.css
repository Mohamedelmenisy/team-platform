// sections/employee-scheduling.js
// FINAL DEBUGGING ATTEMPT - Simplified render, more logs

function initializeEmployeeSchedule(currentUser, teamMembers) {
    console.log("%c--- initializeEmployeeSchedule STARTED (Final Debug Attempt) ---", "color: orange; font-weight: bold;");

    // --- Data Validation ---
    if (!currentUser || typeof currentUser !== 'object') {
        console.error("CRITICAL: currentUser invalid!", currentUser);
        // Display error (implementation needed or rely on console)
        return;
    }
    const scheduleEmployees = Array.isArray(teamMembers) ? [...teamMembers] : [];
    console.log(`Data Received: User Role: ${currentUser.role}, Employee Count: ${scheduleEmployees.length}`);
    if (scheduleEmployees.length === 0) {
        console.warn("WARNING: scheduleEmployees array is EMPTY. Table will show 'No employees'.");
        // This is expected if teamMembers was actually empty.
    }
    // console.log("Employee Data:", JSON.stringify(scheduleEmployees)); // Uncomment if needed

    // --- DOM Elements ---
    const featureContainer = document.getElementById('featureSections');
    if (!featureContainer) { console.error("CRITICAL: #featureSections container missing!"); return; }
    console.log("DOM: #featureSections found.");

    const scheduleTableBody = featureContainer.querySelector('#scheduleTableBody');
    const weekDisplay = featureContainer.querySelector('#weekDisplay');
    // Check ONLY essential elements for rendering
    if (!scheduleTableBody) { console.error("CRITICAL: #scheduleTableBody missing!"); return; }
    if (!weekDisplay) { console.error("CRITICAL: #weekDisplay missing!"); return; }
    console.log("DOM: #scheduleTableBody and #weekDisplay found.");
    // Other elements (modals, buttons) can be checked later if rendering works

    // --- State & Config ---
    let scheduleData = {}; // Assume loading from localStorage happens later if needed
    let currentWeekStart = getStartOfWeek(new Date());

    // --- Permissions ---
    const isAdmin = currentUser.role === 'admin';
    const isSupervisor = currentUser.role === 'supervisor';
    const canEditSchedule = isAdmin || isSupervisor;
    console.log(`Permissions: canEditSchedule=${canEditSchedule}`);

    // --- Utility Functions ---
    function getStartOfWeek(date) {
        const dt = new Date(date);
        const day = dt.getDay();
        const diff = dt.getDate() - day + (day === 0 ? -6 : 1);
        dt.setDate(diff);
        dt.setHours(0, 0, 0, 0);
        return dt;
    }
    function formatDate(date, format = 'yyyy-mm-dd') {
         try {
            if (!(date instanceof Date) || isNaN(date)) { return "Invalid Date"; }
            const yyyy = date.getFullYear();
            const mm = String(date.getMonth() + 1).padStart(2, '0');
            const dd = String(date.getDate()).padStart(2, '0');
            if (format === 'short') { return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }); }
            return `${yyyy}-${mm}-${dd}`;
         } catch(e) { console.error("formatDate error:", e); return "Date Error"; }
     }
     // --- SIMPLIFIED getShift functions for this test ---
     function getShiftClass(type) { return 'shift-morning'; } // Always return one class
     function getShiftText(type, customText = '') { return type || 'Shift'; } // Return type or default


    // --- Core Logic ---

    function renderScheduleTable() {
        console.log(`%c--- renderScheduleTable CALLED --- Employee Count: ${scheduleEmployees.length}`, "color: green;");
        // debugger; // <--- UNCOMMENT THIS LINE to pause execution here in dev tools

        if (!scheduleTableBody) {
            console.error("renderScheduleTable: FATAL - scheduleTableBody element lost!");
            return;
        }
        console.log("renderScheduleTable: Clearing scheduleTableBody...");
        scheduleTableBody.innerHTML = ''; // Clear previous content reliably

        if (scheduleEmployees.length === 0) {
            console.log("renderScheduleTable: No employees. Displaying message.");
            const row = scheduleTableBody.insertRow();
            const cell = row.insertCell();
            cell.colSpan = 8;
            cell.textContent = "No employees available in the schedule.";
            cell.style.textAlign = 'center'; cell.style.padding = '2rem'; cell.style.color = 'var(--gray)'; cell.style.fontStyle = 'italic';
            console.log("renderScheduleTable: 'No employees' message displayed.");
            return;
        }

        // --- SIMPLIFIED RENDERING LOOP ---
        console.log("renderScheduleTable: Starting simplified employee loop...");
        try {
            scheduleEmployees.forEach((emp, empIndex) => {
                console.log(`  Looping employee ${empIndex + 1}: ID=${emp?.id}, Name=${emp?.name}`); // Use optional chaining
                if (!emp || typeof emp.id === 'undefined' || typeof emp.name === 'undefined') {
                     console.warn(`    Skipping invalid employee data at index ${empIndex}`);
                     return; // Skip this iteration
                 }

                // 1. Create Row
                const row = scheduleTableBody.insertRow();
                 if (!row) { throw new Error(`Failed to insert row for employee ${emp.id}`); }
                 row.dataset.employeeId = emp.id;
                 //console.log(`    Row created for ${emp.name}`);

                // 2. Add Name Cell (Simplified)
                const nameCell = row.insertCell();
                 if (!nameCell) { throw new Error(`Failed to insert name cell for employee ${emp.id}`); }
                nameCell.className = 'employee-name';
                nameCell.textContent = emp.name;
                 //console.log(`    Name cell added for ${emp.name}`);

                // 3. Add Basic Day Cells (Just Day Index for now)
                for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
                    const cell = row.insertCell();
                     if (!cell) { throw new Error(`Failed to insert day cell ${dayIndex} for employee ${emp.id}`); }
                    cell.textContent = `Day ${dayIndex}`; // Put *something* simple
                    // Add basic data attributes
                     const cellDate = new Date(currentWeekStart);
                     cellDate.setDate(cellDate.getDate() + dayIndex);
                     cell.dataset.date = formatDate(cellDate);
                     cell.dataset.dayIndex = dayIndex;

                    // Add edit span if needed (simplified content)
                     if(canEditSchedule) {
                         cell.classList.add('admin-controls');
                         cell.innerHTML += ' <span class="edit-shift" title="Edit">âœŽ</span>'; // Simple edit symbol
                         // Listener should be attached separately if needed for debugging later
                     }
                }
                 //console.log(`    Day cells added for ${emp.name}`);
            }); // End forEach employee
            console.log("renderScheduleTable: Finished simplified employee loop successfully.");

        } catch (error) {
            console.error("!!! CRITICAL ERROR inside renderScheduleTable loop !!!:", error);
             scheduleTableBody.innerHTML = `<tr><td colspan="8" style="color: red; text-align: center; padding: 1rem;">ERROR: Failed to render schedule rows. Check console.</td></tr>`;
        }
    }

    function updateWeekDisplay() {
        console.log(`%c--- updateWeekDisplay CALLED --- Week Start: ${currentWeekStart.toDateString()}`, "color: blue;");
        // debugger; // <--- UNCOMMENT THIS LINE to pause execution here
        if (!weekDisplay) { console.error("updateWeekDisplay: weekDisplay element missing!"); return; }

        try {
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            const startStr = formatDate(currentWeekStart, 'short');
            const endStr = formatDate(weekEnd, 'short');
            const year = currentWeekStart.getFullYear();

            if (startStr === "Invalid Date" || endStr === "Invalid Date") throw new Error("Date formatting failed");

            weekDisplay.textContent = `${startStr} - ${endStr}, ${year}`;
            console.log(`updateWeekDisplay: Week text set to: ${weekDisplay.textContent}`);

            // Update header dates
            const dateHeaders = featureContainer.querySelector('#scheduleTable thead')?.querySelectorAll('.day-date');
            if (dateHeaders && dateHeaders.length === 7) {
                const tempDate = new Date(currentWeekStart);
                dateHeaders.forEach(cell => {
                    const formatted = formatDate(tempDate, 'short');
                    cell.textContent = formatted !== "Invalid Date" ? formatted : "Error";
                    tempDate.setDate(tempDate.getDate() + 1);
                });
                 console.log("updateWeekDisplay: Header dates updated.");
            } else { console.warn("updateWeekDisplay: Could not find header date cells."); }

            // Update button states (keep simple for now)
             const prevBtn = featureContainer.querySelector('#prevWeekBtn');
             const nextBtn = featureContainer.querySelector('#nextWeekBtn');
             if(prevBtn) prevBtn.disabled = false;
             if(nextBtn) nextBtn.disabled = false;

            // Call render AFTER updating display logic
            console.log("updateWeekDisplay: Calling renderScheduleTable...");
            renderScheduleTable();

            console.log("updateWeekDisplay: Finished successfully.");
        } catch (error) {
             console.error("Error during updateWeekDisplay:", error);
             weekDisplay.textContent = "Error";
             if(scheduleTableBody) scheduleTableBody.innerHTML = `<tr><td colspan="8" style="color: red; text-align: center; padding: 1rem;">Error updating week display.</td></tr>`;
        }
    }

    // --- Event Handlers (Keep simplified or stubbed for now) ---
    function handlePrevWeek() { console.log("Prev Week Clicked"); currentWeekStart.setDate(currentWeekStart.getDate() - 7); updateWeekDisplay(); }
    function handleNextWeek() { console.log("Next Week Clicked"); currentWeekStart.setDate(currentWeekStart.getDate() + 7); updateWeekDisplay(); }
    // ... other handlers (modals, save, etc.) can be added back later ...

    // --- Event Listener Setup ---
    function setupScheduleEventListeners() {
        console.log("setupScheduleEventListeners: Attaching minimal listeners...");
        try {
            featureContainer.querySelector('#prevWeekBtn')?.addEventListener('click', handlePrevWeek);
            featureContainer.querySelector('#nextWeekBtn')?.addEventListener('click', handleNextWeek);
            // Add listeners for modals/buttons later if base rendering works
            console.log("setupScheduleEventListeners: Minimal listeners attached.");
        } catch (error) {
            console.error("ERROR attaching schedule event listeners:", error);
        }
    }

    // --- Initial Setup ---
    function init() {
        console.log("init: Starting Employee Schedule module initialization...");
        // Load minimal data needed for rendering test (scheduleData can be empty initially)
        try {
             const savedData = localStorage.getItem('employeeScheduleData');
             if (savedData) { scheduleData = JSON.parse(savedData); } else { scheduleData = {}; }
             console.log("init: Schedule data loaded/initialized.");
        } catch(e) { console.error("init: Error loading scheduleData", e); scheduleData = {}; }


        // Apply Permissions (minimal for now)
        console.log("init: Applying permissions visibility...");
         const addBtn = featureContainer.querySelector('#addEmployeeBtn');
         const sendBtn = featureContainer.querySelector('#sendRemindersBtn');
         const saveBtn = featureContainer.querySelector('#saveScheduleBtn');
         if(addBtn) addBtn.style.display = isAdmin ? 'flex' : 'none';
         if(sendBtn) sendBtn.style.display = canEditSchedule ? 'flex' : 'none';
         if(saveBtn) saveBtn.style.display = canEditSchedule ? 'flex' : 'none';

        // Setup MINIMAL listeners
        setupScheduleEventListeners();

        // Initial Render
        console.log("init: Performing initial call to updateWeekDisplay...");
        updateWeekDisplay(); // This should trigger the first render

        console.log("%c--- initializeEmployeeSchedule FINISHED (Final Debug Attempt) ---", "color: green; font-weight: bold;");
    }

    // --- Run Initialization ---
    try {
        init();
    } catch (error) {
        console.error("CRITICAL ERROR during Schedule init():", error);
        if (scheduleTableBody) { scheduleTableBody.innerHTML = `<tr><td colspan="8" style="color: red; text-align: center; padding: 1rem;">Fatal error during init. Check console.</td></tr>`; }
        else if (featureContainer) { featureContainer.innerHTML = `<div class="placeholder-content error-message">Fatal error initializing schedule. Check console.</div>`; }
    }

} // End of initializeEmployeeSchedule function
